using UnityEngine;
using System.Collections;

/// <summary>
/// Composant qui inflige des d√©g√¢ts au joueur lors d‚Äôun contact avec un trigger 2D.
/// Peut √™tre configur√© pour n‚Äôappliquer le d√©g√¢t qu‚Äôune seule fois et d√©clencher des feedbacks visuels/sonores.
/// </summary>
/// 
public class Damager : MonoBehaviour
{
    [Header("Param√®tres de d√©g√¢ts")]
    [SerializeField] private float damageAmount = 25f;
    [SerializeField] private string playerTag = "Player";
    [SerializeField] private bool applyOnce = true;             // Si activ√©, les d√©g√¢ts sont appliqu√©s une seule fois 
    [SerializeField] private MonoBehaviour[] feedbackModulesRaw;

    private IDamagerFeedback[] feedbackModules;                 // Liste de modules visuels √† activer (doivent impl√©menter IDamagerFeedback)
    private bool hasAppliedDamage = false;                      // Pour √©viter d'appliquer plusieurs fois les d√©g√¢ts


    private void Awake()
    {
        // Recherche automatique dans les enfants
        feedbackModules = GetComponentsInChildren<IDamagerFeedback>();
        Debug.Log($"[Damager] üîç Feedbacks trouv√©s automatiquement : {feedbackModules.Length}");
    }
    
    /// <summary>
    /// Appel√© automatiquement par Unity quand un collider entre dans ce trigger
    /// </summary>

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag(playerTag)) return;
        if (applyOnce && hasAppliedDamage) return;

        PlayerHealth playerHealth = other.GetComponent<PlayerHealth>();
        if (playerHealth != null)
        {
            ApplyDamage(playerHealth);
        }

        // On d√©clenche tous les feedbacks (ex : fx, son, flash...)
        foreach (var feedback in feedbackModules)
        {
            Debug.Log($"[Damager] ‚Üí Activation de {feedback}");
            feedback?.TriggerFeedback();
        }

        if (applyOnce)
            hasAppliedDamage = true;
    }

    /// <summary>
    /// Appel√© quand le joueur sort de la zone de danger
    /// Permet d‚Äôarr√™ter les effets visuels ou sonores (ex : feu, laser)
    /// </summary>
    private void OnTriggerExit2D(Collider2D other)
    {
        if (!other.CompareTag(playerTag)) return;

        foreach (var module in feedbackModules)
        {
            if (module is IDamagerFeedback feedback)
            {
                feedback.StopFeedback();
            }
        }
    }

    /// <summary>
    /// M√©thode qui applique r√©ellement les d√©g√¢ts au joueur
    /// </summary>
    public void ApplyDamage(PlayerHealth player)
    {
        player.TakeDamage(damageAmount);
    }
}
