using UnityEngine;
using UnityEngine.Rendering.Universal;
using System.Collections;

/// <summary>
/// G√®re le comportement d‚Äôun ennemi avec plusieurs √©tats (Dormant, Alert, Chase, Return),
/// incluant le mouvement, la d√©tection du joueur, et un effet visuel de r√©v√©lation.
/// Impl√©mente l‚Äôinterface IAlertable pour r√©agir √† une onde ou un √©v√©nement.
/// </summary>

[RequireComponent(typeof(Rigidbody2D))]
public class EnemyAI : MonoBehaviour, IAlertable
{
    public enum EnemyState { Dormant, Alert, Chase, Return }

    [Header("Movement")]
    [Tooltip("Deplacement vers le point d‚Äôalerte")]
    [SerializeField] private float alertSpeed = 2f;
    [Tooltip("D√©placement vers le joueur")]
    [SerializeField] private float chaseSpeed = 3f;
    [Tooltip("Dur√©e √©tat d‚Äôalerte avant de revenir")]
    [SerializeField] private float alertDuration = 2f;
    [Tooltip("Dur√©e max poursouite apr√®s d√©tection")]
    [SerializeField] private float chaseDuration = 3f;
    [Tooltip("Rayon de d√©tection du joueur")]
    [SerializeField] private float chaseRange = 6f;
    [Tooltip("D√©calage vertical appliqu√© √† la position de retour")]
    [SerializeField] private float returnYOffset = -2f; // üëà Y relatif au joueur

    [Header("Gameplay")]
    [SerializeField] private Transform player;

    [Header("Reveal")]
    [Tooltip("Lumi√®re utilis√©e lors de la r√©v√©lation de l‚Äôennemi")]
    [SerializeField] private Light2D revealLight;
    [SerializeField] private float revealDuration = 1.5f;
    [SerializeField] private float fadeSpeed = 2f;

    private Coroutine revealRoutine;
    private Rigidbody2D rb;
    private Vector2 startPosition;
    private Vector2 lastAlertPosition;
    private Vector2 returnPosition;
    private EnemyState currentState = EnemyState.Dormant;
    private float stateTimer = 0f;
    private bool hasHitPlayer = false;  // cooldown suite attaque

    private LightFlasher lightFlasher;  // G√®re l'effet visuel de flash clignotant
    private PlayerVFX playerVFX;        // G√®re les effets visuels du joueur (ex : particules attir√©es)

    private void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        startPosition = transform.position;

        if (revealLight != null)
        {
            revealLight.enabled = false;
        }

        lightFlasher = GetComponentInChildren<LightFlasher>();
        
        if (player != null)
            playerVFX = player.GetComponentInChildren<PlayerVFX>();
    }

    private void Update()
    {
        switch (currentState)
        {
            case EnemyState.Dormant:
                rb.linearVelocity = Vector2.zero;
                break;

            case EnemyState.Alert:
                UpdateAlert();
                break;

            case EnemyState.Chase:
                UpdateChase();
                break;

            case EnemyState.Return:
                UpdateReturn();
                break;
        }

        HandleAbsorptionFlash();
    }

    /// <summary>
    /// M√©thode appel√©e lorsque le joueur est touch√© (via EnemyDamageTrigger).
    /// </summary>
    public void NotifyPlayerHit()
    {
        hasHitPlayer = true;
    }

    /// <summary>
    /// Comportement en mode Alert : d√©placement vers la source d‚Äôalerte, puis retour.
    /// </summary>
    private void UpdateAlert()
    {
        stateTimer -= Time.deltaTime;
        MoveTowards(lastAlertPosition, alertSpeed);

        if (player != null && Vector2.Distance(transform.position, player.position) <= chaseRange)
        {
            ChangeState(EnemyState.Chase);
            return;
        }

        if (stateTimer <= 0f)
        {
            if (player != null)
            {
                float targetY = player.position.y + returnYOffset;
                returnPosition = new Vector2(transform.position.x, targetY);
                Debug.Log($"[EnemyAI] üîÅ Retour configur√© vers Y={targetY:F2} (playerY={player.position.y:F2} + offset={returnYOffset})");
            }
            ChangeState(EnemyState.Return);
        }
    }

    /// <summary>
    /// Comportement en mode Chase : poursuite du joueur.
    /// </summary>
    private void UpdateChase()
    {
        if (player == null)
        {
            ChangeState(EnemyState.Dormant);
            return;
        }

        // üÜï Si le joueur a √©t√© touch√©, retour imm√©diat
        if (hasHitPlayer)
        {
            if (player != null)
            {
                float targetY = player.position.y + returnYOffset;
                returnPosition = new Vector2(transform.position.x, targetY);
            }
            ChangeState(EnemyState.Return);
            hasHitPlayer = false;
            return;
        }

        stateTimer -= Time.deltaTime;
        MoveTowards(player.position, chaseSpeed);

        float distanceToPlayer = Vector2.Distance(transform.position, player.position);
        if (distanceToPlayer <= chaseRange)
        {
            stateTimer = chaseDuration;
        }

        if (stateTimer <= 0f)
        {
            if (player != null)
            {
                float targetY = player.position.y + returnYOffset;
                returnPosition = new Vector2(transform.position.x, targetY);
            }
            ChangeState(EnemyState.Return); // üîÅ passage par retour avant dormant
        }
    }

    /// <summary>
    /// Comportement de retour √† une position apr√®s alerte ou poursuite.
    /// </summary>
    private void UpdateReturn()
    {
        MoveTowards(returnPosition, alertSpeed);

        if (Vector2.Distance(transform.position, returnPosition) < 0.05f)
        {
            ChangeState(EnemyState.Dormant);
        }
    }

    /// <summary>
    /// D√©place l‚Äôennemi vers une cible donn√©e √† une certaine vitesse.
    /// </summary>
    private void MoveTowards(Vector2 target, float speed)
    {
        Vector2 dir = (target - (Vector2)transform.position).normalized;
        rb.linearVelocity = dir * speed;
    }

    /// <summary>
    /// Change l‚Äô√©tat de l‚Äôennemi et met √† jour les timers associ√©s.
    /// </summary>
    private void ChangeState(EnemyState newState)
    {
        currentState = newState;

        switch (newState)
        {
            case EnemyState.Alert:
                stateTimer = alertDuration;
                //Debug.Log("[EnemyAI] ‚ö†Ô∏è √âtat ALERT d√©clench√©");
                break;

            case EnemyState.Chase:
                stateTimer = chaseDuration;
                //Debug.Log("[EnemyAI] üî• √âtat CHASE d√©clench√©");

                // üÜï Activation de l‚Äôattraction visuelle dans PlayerVFX
                if (playerVFX != null)
                    playerVFX.SetAttractor(transform);
                break;

            case EnemyState.Dormant:
                rb.linearVelocity = Vector2.zero;
                //Debug.Log("[EnemyAI] üò¥ Retour √† l‚Äô√©tat DORMANT");

                // üÜï D√©sactivation de l‚Äôattraction
                if (playerVFX != null)
                    playerVFX.ClearAttractor();
                break;

            case EnemyState.Return:
                //Debug.Log("[EnemyAI] üîô √âtat RETURN d√©clench√©");
                break;
        }
    }

    /// <summary>
    /// R√©agit √† une alerte ext√©rieure (ex: onde) et d√©clenche l‚Äôeffet visuel si disponible.
    /// </summary>
    public void Alert(Vector2 sourcePosition)
    {
        lastAlertPosition = sourcePosition;

        if (revealRoutine != null)
            StopCoroutine(revealRoutine);

        if (revealLight != null)
            revealRoutine = StartCoroutine(RevealEffect());

        if (player != null && Vector2.Distance(transform.position, player.position) <= chaseRange)
        {
            ChangeState(EnemyState.Chase);
        }
        else if (currentState == EnemyState.Dormant)
        {
            ChangeState(EnemyState.Alert);
        }
    }

    /// <summary>
    /// Coroutine qui g√®re un flash lumineux lors de la r√©v√©lation.
    /// </summary>
    private IEnumerator RevealEffect()
    {
        revealLight.enabled = true;
        revealLight.intensity = 1f;

        float timer = 0f;
        while (timer < revealDuration)
        {
            timer += Time.deltaTime;
            yield return null;
        }

        while (revealLight.intensity > 0f)
        {
            revealLight.intensity -= Time.deltaTime * fadeSpeed;
            yield return null;
        }

        revealLight.enabled = false;
        revealLight.intensity = 1f;
    }

    /// <summary>
    /// D√©clenche un effet visuel (flash) lorsque le joueur est √† port√©e.
    /// </summary>
    private void HandleAbsorptionFlash()
    {
        if (player == null || revealLight == null) return;

        float distance = Vector2.Distance(transform.position, player.position);
        bool withinAbsorption = distance <= chaseRange;

        if (withinAbsorption)
            lightFlasher.StartFlashing();
        else
            lightFlasher.StopFlashing();
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, chaseRange);

#if UNITY_EDITOR
        if (currentState == EnemyState.Alert)
        {
            Gizmos.color = Color.yellow;
            Gizmos.DrawLine(transform.position, lastAlertPosition);
            Gizmos.DrawWireSphere(lastAlertPosition, 0.3f);
        }

        if (currentState == EnemyState.Chase && player != null)
        {
            Gizmos.color = Color.magenta;
            Gizmos.DrawLine(transform.position, player.position);
        }
#endif
    }
}