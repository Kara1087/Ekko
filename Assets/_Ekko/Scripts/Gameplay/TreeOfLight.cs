using UnityEngine;
using UnityEngine.Events;

/// <summary>
/// G√®re le coeur logique du Tree of Light : d√©tection du joueur, activation progressive, √©tat global.
/// </summary>
public class TreeOfLight : MonoBehaviour
{
    public enum TreeState { Idle, Activating, Lit, Failed }

    [Header("Config")]
    [SerializeField] private float revealDuration = 5f; // Dur√©e d'activation du Tree of Light
    [SerializeField] private Collider2D triggerZone;

    [Header("Events")]
    public UnityEvent OnTreeActivated;
    
    [Header("Debug")]
    [SerializeField] private bool debug = false;

    private TreeState currentState = TreeState.Idle;
    private float currentTimer = 0f;
    private bool playerInZone = false;

    private void Awake()
    {
        // Si la zone de trigger n‚Äôest pas assign√©e, on essaie de la r√©cup√©rer
        if (triggerZone == null)
            triggerZone = GetComponent<Collider2D>();

        // Assurer que le collider est bien en mode trigger
        if (triggerZone != null)
            triggerZone.isTrigger = true;
    }

    private void Update()
    {
        if (currentState == TreeState.Activating && playerInZone)
        {
            currentTimer += Time.deltaTime;
            // Si on a pass√© le temps requis ‚Üí Tree activ√©
            if (currentTimer >= revealDuration)
            {
                CompleteReveal();
            }
        }
        // Si le joueur est parti pendant l‚Äôactivation ‚Üí on annule
        else if (currentState == TreeState.Activating && !playerInZone)
        {
            FailReveal();
        }
    }

    private void CompleteReveal()
    {
        currentState = TreeState.Lit;
        if (debug) Debug.Log("üå≥ Tree fully activated.");
        
        OnTreeActivated?.Invoke(); // üëàüëàüëà √âv√©nement centralis√© ici
    }

    private void FailReveal()
    {
        currentState = TreeState.Failed;
        currentTimer = 0f;
        
        if (debug) Debug.Log("üö´ Tree activation failed.");
        
        // TODO : reset visuel, arr√™ter reveal
        
        // üõë Stopper la musique d‚Äôactivation
        AudioManager.Instance.StopMusicTheme();
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        Debug.Log(">> Trigger entered by: " + other.name);
        if (other.CompareTag("Player") && currentState == TreeState.Idle)
        {
            playerInZone = true;
            currentState = TreeState.Activating;
            currentTimer = 0f;
            if (debug) Debug.Log("‚ñ∂Ô∏è Tree activation started.");
            // TODO : d√©marrer le LightRevealManager, audio, etc.
            // üîä Lancer la musique directement ici
            AudioManager.Instance.SetVolume("BackgroundTheme", 0.1f); // Optionnel : baisse l‚Äôambiance
            AudioManager.Instance.PlayOverlayMusic("TreeReveal");
        }
    }

    private void OnTriggerExit2D(Collider2D other)
    {
        if (other.CompareTag("Player"))
        {
            playerInZone = false;
        }
    }

    public TreeState GetCurrentState() => currentState;

}
