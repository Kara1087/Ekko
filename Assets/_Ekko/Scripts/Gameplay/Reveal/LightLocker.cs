using UnityEngine;
using UnityEngine.Rendering.Universal;

/// <summary>
/// Composant qui contr√¥le une Light2D en tant que feedback visuel d‚Äôun √©v√©nement de type "dommage".
/// Impl√©mente l‚Äôinterface `IDamagerFeedback`, ce qui permet au `Damager` de l‚Äôactiver ou le d√©sactiver.
/// Tr√®s utile pour cr√©er des **effets de lumi√®re contextuels** (ex: laser qui s‚Äôallume quand on entre dans une zone).
/// </summary>

public class LightLocker : MonoBehaviour, IDamagerFeedback
{
    [Header("Target Light")]
    [SerializeField] private Light2D targetLight;         // Lumi√®re 2D √† contr√¥ler (doit √™tre assign√©e dans l‚Äôinspecteur)

    [Header("Valeurs ON")]
    [SerializeField] private float litIntensity = 1f;     // Intensit√© quand la lumi√®re est "allum√©e"
    [SerializeField] private float litRadius = 5f;        // Rayon ext√©rieur quand la lumi√®re est "allum√©e"

    [Header("Valeurs OFF")]
    [SerializeField] private float offIntensity = 0f;     // Intensit√© quand la lumi√®re est √©teinte
    [SerializeField] private float offRadius = 0f;        // Rayon quand la lumi√®re est √©teinte

    private void Awake()
    {
        if (targetLight == null)
        {
            targetLight = GetComponentInChildren<Light2D>();
            Debug.LogWarning("[LightLocker] ‚ö†Ô∏è Light2D non assign√©e manuellement, tentative de r√©cup√©ration via GetComponentInChildren.");
        }
    }

    /// <summary>
    /// M√©thode appel√©e par le `Damager` quand le joueur entre dans la zone
    /// </summary>

    public void TriggerFeedback()
    {
        if (targetLight == null)
        {
            Debug.LogWarning("[LightLocker] ‚ùå targetLight est null, impossible d‚Äôallumer la lumi√®re");
            return;
        }

        targetLight.enabled = true;
        targetLight.intensity = litIntensity;
        targetLight.pointLightOuterRadius = litRadius;

        //Debug.Log($"[LightLocker] üí° Activation lumi√®re ‚Üí Intensity: {litIntensity} | Radius: {litRadius}");

    }

    /// <summary>
    /// M√©thode appel√©e par le `Damager` quand le joueur sort de la zone
    /// </summary>
    public void StopFeedback()
    {
        if (targetLight == null) return;

        targetLight.intensity = offIntensity;
        targetLight.pointLightOuterRadius = offRadius;
    }
}