using UnityEngine;
using UnityEngine.Events;

/// <summary>
/// G√®re la "vie" du joueur sous forme de lumi√®re.
/// Appelle des √©v√©nements quand la lumi√®re change, devient faible ou tombe √† z√©ro.
/// </summary>
public class PlayerHealth : MonoBehaviour
{   
    
    [Header("Lumi√®re/Vie")]
    [SerializeField] private float maxLight = 100f;
    [SerializeField] private float currentLight;

    [Header("Seuil critique")]
    [SerializeField] private float lowLightThreshold = 20f;

    [Header("Events")]
    public UnityEvent onLightChanged;           // Appel√© √† chaque changement de lumi√®re (d√©g√¢ts ou soin)
    public UnityEvent onLowLight;               // Appel√© quand la lumi√®re passe sous le seuil critique
    public UnityEvent onDeath;

    [Header("References")]
    [SerializeField] private PlayerVFX playerVFX;
    [SerializeField] private PlayerLight playerLight;
    
    private bool hasTriggeredFirstSpectreQuote = false;                  

    // --- GETTERS PUBLICS ---
    public float CurrentLight => currentLight;
    public float MaxLight => maxLight;
    public bool IsDead => currentLight <= 0f;
    public bool IsLow => currentLight <= lowLightThreshold;

    private void Awake()
    {
        // Initialisation max light
        currentLight = maxLight;
    }

    private void Update()
    {

    }

    // --- M√âTHODES DE TEST RAPIDES ---
    [ContextMenu("Test: Restore Light (30)")]
    private void TestRestoreLight()
    {
        RestoreLight(30f);
        Debug.Log("[PlayerHealth] TestRestoreLight: +30");
    }

    [ContextMenu("Test: Take Damage (25)")]
    private void TestTakeDamage()
    {
        TakeDamage(25f); // Appelle la m√©thode normale avec 25 de d√©g√¢ts
        Debug.Log("[PlayerHealth] TestTakeDamage: -25");
    }

    public void TakeDamage(float amount, GameObject source = null)
    {
        if (IsDead)
            return;

        // R√©duction de lumi√®re : Diminue currentLight
        currentLight -= amount;
        currentLight = Mathf.Clamp(currentLight, 0f, maxLight);     // √âvite d‚Äôaller en n√©gatif

        Debug.Log($"[PlayerHealth] üí• D√©g√¢ts re√ßus : -{amount} | Lumi√®re restante : {currentLight} | IsDead = {IsDead}");

        // D√©clenche une citation si la source est un ennemi sp√©cifique
        if (!hasTriggeredFirstSpectreQuote && source != null && source.CompareTag("Enemy"))
        {
            hasTriggeredFirstSpectreQuote = true;

            // Affiche une citation Tip li√©e aux d√©g√¢ts (tag personnalis√©)
            QuoteManager.Instance?.ShowRandomQuote(QuoteType.Tip, QuoteTag.Diversion);
            Debug.Log("[PlayerHealth] ‚ö†Ô∏è Premier d√©g√¢t re√ßu d'un Spectre !");
        }

        onLightChanged?.Invoke();   // Notifie tout syst√®me √©coutant ce changement (UI, shader, etc.)

        // Feedback visuel
        playerLight?.FlashAbsorptionEffect(); // Effet visuel de flash/lumi√®re aspir√©e
        playerVFX?.TriggerDamageFeedback(); // Particules aspir√©es/burst visuel

        if (IsLow) onLowLight?.Invoke();
        if (IsDead)
        {
            onDeath?.Invoke();
            HandleDeath();
        }
    }

    /// <summary>
    /// R√©initialise la lumi√®re au maximum (utile apr√®s un respawn ou une transition).
    /// </summary>
    public void ResetHealth()
    {
        //Debug.Log("[PlayerHealth] üîÅ Reset de la lumi√®re");
        currentLight = maxLight;
        //hasTriggeredFirstSpectreQuote = false; // üîÅ reset aussi la citation contextuelle si besoin
        onLightChanged?.Invoke();
    }

    /// <summary>
    /// Restaure de la lumi√®re (√©quivalent d‚Äôun soin ou d‚Äôun bonus lumineux).
    /// </summary>
    public void RestoreLight(float amount)
    {
        currentLight += amount;
        currentLight = Mathf.Clamp(currentLight, 0f, maxLight);
        onLightChanged?.Invoke();
    }

    /// <summary>
    /// D√©finir manuellement la lumi√®re (debug, chargement de sauvegarde, effet sp√©cial).
    /// </summary>
    public void SetLight(float value) // Cas d'usage : R√©initialisation, Effets de script/Debug, Chargement de sauvegarde, Pouvoir sp√©cial/Sc√®ne narrative
    {
        currentLight = Mathf.Clamp(value, 0f, maxLight);
        Debug.Log($"[PlayerHealth] üîß Lumi√®re d√©finie manuellement : {currentLight}");
        onLightChanged?.Invoke();
    }

    /// <summary>
    /// Retourne un ratio entre 0 et 1 pour repr√©senter visuellement la lumi√®re (utile en UI).
    /// </summary>
    public float GetLightRatio()
    {
        return currentLight / maxLight;
    }

    /// <summary>
    /// G√®re la mort du joueur via le GameManager.
    /// </summary>
    private void HandleDeath()
    {

        if (GameManager.Instance != null)
        {
            GameManager.Instance.HandlePlayerDeath();
        }
        else
        {
            Debug.LogWarning("[PlayerHealth] GameManager.Instance est null !");
        }
    }
}